<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->

    <!-- 定义日志文件 输入位置 -->
    <property name="log_dir" value="logs/gecko"/>

    <!-- 配置日志清理时间，日志最大的历史60天 -->
    <property name="maxHistory" value="60"/>
    <!-- 配置日志文件限制 -->
    <property name="totalSizeCap" value="10GB"/>
    <!-- 设置单个日志文件的大小限制 -->
    <property name="maxFileSize" value="200MB"/>

    <!-- %d{yyyy-MM-dd HH:mm:ss:SSS} 时间戳-->
    <!-- %thread 线程名-->
    <!-- %-5level 日志级别-->
    <property name="PATTERN"
        value="%d{yyyy-MM-dd HH:mm:ss:SSS} %green([%thread]) %-5level   %logger{36}.%M.%L - %msg%n"/>
    <!-- <property name="STAND_PATTERN"
               value="%d{yyyy-MM-dd HH:mm:ss:SSS} %X{EAGLEEYE_TRACE_ID}-%X{EAGLEEYE_RPC_ID} %green([%thread]) %highlight(%-5level) %logger{36}.%M.%L - %msg%n"/>-->
    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>${PATTERN}</pattern>
            <!--<pattern>%black(控制台-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>-->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- Only log level WARN and above -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>


    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_dir}/error-log.log</file>
        <!-- 打印 ERROR 级别和以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志输出位置  可相对、和绝对路径 -->
            <fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/error-log.%i.log</fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，
            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
            <!-- 日志清理时间 -->
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>


    <!-- WARN级别日志 appender -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_dir}/warn-log.log</file>
        <!-- 打印 WARN 级别和以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/warn-log.%i.log
            </fileNamePattern>
            <!-- 日志清理时间 -->
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_dir}/info-log.log</file>
        <!-- 打印INFO级别和以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/info-log.%i.log
            </fileNamePattern>
            <!-- 日志清理时间 -->
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- DEBUG级别日志 appender -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_dir}/debug-log.log</file>
        <!-- 打印 DEBUG 级别和以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/debug-log.%i.log</fileNamePattern>
            <!-- 日志清理时间 -->
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- root级别     -->
    <root level="INFO">
        <!-- 控制台输出 -->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ERROR"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="DEBUG"/>
    </root>

    <!-- 测试环境 -->
    <springProfile name="test">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="org.springboot.sample" level="INFO"/>
        <logger name="com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver" level="WARN"/>
        <logger name="com.alibaba.druid" level="DEBUG" additivity="false">
            <appender-ref ref="DEBUG"/>
            <appender-ref ref="ERROR"/>
        </logger>

        <logger name="org.springframework.amqp.core" level="INFO" additivity="false">
            <appender-ref ref="DEBUG"/>
            <appender-ref ref="ERROR"/>
        </logger>
        <logger name="org.springframework.amqp.rabbit" level="INFO" additivity="false">
            <appender-ref ref="DEBUG"/>
            <appender-ref ref="ERROR"/>
        </logger>

    </springProfile>

    <!-- 体验环境 -->
    <springProfile name="expe">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="org.springboot.sample" level="INFO"/>
        <logger name="com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver" level="WARN"/>
        <logger name="com.alibaba.druid" level="DEBUG" additivity="false">
            <appender-ref ref="DEBUG"/>
            <appender-ref ref="ERROR"/>
        </logger>

        <logger name="org.springframework.amqp.core" level="INFO" additivity="false">
            <appender-ref ref="DEBUG"/>
            <appender-ref ref="ERROR"/>
        </logger>
        <logger name="org.springframework.amqp.rabbit" level="INFO" additivity="false">
            <appender-ref ref="DEBUG"/>
            <appender-ref ref="ERROR"/>
        </logger>

    </springProfile>

    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="org.springboot.sample" level="INFO"/>
        <logger name="com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver" level="WARN"/>

    </springProfile>

</configuration>